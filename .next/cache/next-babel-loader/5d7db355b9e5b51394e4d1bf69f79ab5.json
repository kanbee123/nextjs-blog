{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nvar postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // /posts　配下のファイル名を取得する\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // id を取得するためにファイル名から \".md\" を削除する\n    var id = fileName.replace(/\\.md$/, ''); // マークダウンファイルを文字列として読み取る\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // 投稿のメタデータ部分を解析するために gray-matter を使う\n\n    var matterResult = matter(fileContents); // データを id と合わせる\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // 投稿を日付でソートする\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getStateProps() {\n  return _getStateProps.apply(this, arguments);\n}\n\nfunction _getStateProps() {\n  _getStateProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var allPostsData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            allPostsData = getSortedPostsData();\n            return _context.abrupt(\"return\", {\n              props: {\n                allPostsData: allPostsData\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStateProps.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/keita/Desktop/NEXT_Practice/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getStateProps","props"],"mappings":";;;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,IAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,MAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,MAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC7C;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,QAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,QAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,QAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEH,MAAAA,EAAE,EAAFA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCd,YAAAA,YADD,GACgBH,kBAAkB,EADlC;AAAA,6CAEE;AACLkB,cAAAA,KAAK,EAAE;AACLf,gBAAAA,YAAY,EAAZA;AADK;AADF,aAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n  // /posts　配下のファイル名を取得する\n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = fileNames.map(fileName => {\n    // id を取得するためにファイル名から \".md\" を削除する\n    const id = fileName.replace(/\\.md$/, '')\n\n    // マークダウンファイルを文字列として読み取る\n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // 投稿のメタデータ部分を解析するために gray-matter を使う\n    const matterResult = matter(fileContents)\n\n    // データを id と合わせる\n    return {\n      id,\n      ...matterResult.data\n    }\n  })\n  // 投稿を日付でソートする\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\nexport async function getStateProps() {\n  const allPostsData = getSortedPostsData()\n  return {\n    props: {\n      allPostsData\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}